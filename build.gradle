plugins {
  id "com.palantir.docker" version "0.25.0"
  id 'com.palantir.docker-compose' version "0.25.0"
}

ext {
  interlokParentGradle = project.findProperty('interlokParentGradle') ?: 'https://raw.githubusercontent.com/adaptris-labs/interlok-build-parent/master/build.gradle'
  dockerImageName = project.findProperty('dockerImageName') ?: "adaptrislabs/interlok-hpcc"
  dockerImageTag = project.findProperty('dockerImageVersion') ?: "latest"
  includeWar='true'
  buildEnv='docker'
  // Ensure variable substitutions work for 'check'
  interlokVerifyEnvironmentProperties = [
    INTERLOK_HOST: "localhost",
    HPCC_HOST: "localhost",
    AWS_ACCESS_KEY: "dummy-access-key",
    AWS_SECRET_KEY: "dummy-secret-key",
    AWS_REGION: "eu-central-1 because GDPR right",
    AWS_BUCKET: "my-bucket-name"
  ]

}

allprojects {
  apply from: "${interlokParentGradle}"
}


dependencies {
  interlokRuntime ("com.adaptris:interlok-xinclude:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-logging:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-hpcc:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-aws-s3:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-json:$interlokVersion") { changing=true }
  interlokRuntime ("com.adaptris:interlok-apache-http:$interlokVersion") { changing=true }
}

dockerCompose {
  dockerComposeFile "docker-compose.yml"
}

task dockerScriptPrepare(type: Copy) {
  from ("src/main/docker")
  into "${project.buildDir}/docker/docker"
}

// This is arguably confusing, but allows us to create a filesystem under build/docker
// such that we can do
// ./gradlew assemble
// docker build -t blah:latest .
// we would have to modify Dockerfile.interlok so that it reference "./src/main" and "./build/distribution" etc.
// def dockerScriptCopy = copySpec {
//   from ("src/main/docker")
//   into ("./src/main/docker")
// }

// def dockerInstallDistCopy = copySpec {
//   from (installDist)
//   into "./build/distribution"
// }

docker {
  name dockerImageName
  dockerfile file('Dockerfile.interlok')
  tags dockerImageTag
  // copySpec.with(dockerScriptCopy, dockerInstallDistCopy)
  files tasks.installDist.outputs
  noCache true
  pull true
}

dockerPrepare.dependsOn dockerScriptPrepare
docker.dependsOn check,assemble
